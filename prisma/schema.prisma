// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                String              @id @default(cuid())
  nome              String
  email             String              @unique
  cpf               String              @unique
  senha             String
  tipo              Int                 
  formularios       FormularioUsuario[]
  inscricoes        Inscricao[]         
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Inscricao {
  id          String   @id @default(cuid())
  usuarioId   String
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  editalId    String
  edital      Edital   @relation(fields: [editalId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Edital {
  id                String              @id @default(cuid())
  titulo            String
  dataCriacao       DateTime            @default(now())
  dataPublicacao    DateTime
  dataEncerramento  DateTime
  formulario        Formulario?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  inscricoes        Inscricao[]        
  senha             String
  arquivos          ArquivoEdital[]
}

model ArquivoEdital {
  id                String              @id @default(cuid())
  url               String
  rotulo            String
  edital            Edital?             @relation(fields: [editalId], references: [id]) // Relacionamento com Edital
  editalId         String?
}

model Formulario {
  id                String                  @id @default(cuid())
  titulo            String
  dataInicio        DateTime
  dataFim           DateTime
  edital            Edital                  @relation(fields: [editalId], references: [id], onDelete: Cascade)
  editalId          String                  @unique
  campos            CampoFormulario[]
  inscricoes        FormularioUsuario[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
}

model CampoFormulario {
  id                String              @id @default(cuid())
  rotulo            String
  tipo              Int                 // 0: texto, 1: textarea, 2: radio, 3: select, 4: checkbox, 5: data, 6: arquivo
  obrigatorio       Int                 // 0: não, 1: sim
  ordem             Int?
  formulario        Formulario          @relation(fields: [formularioId], references: [id], onDelete: Cascade)
  formularioId      String
  respostas         FormularioUsuarioCampo[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model FormularioUsuario {
  id                String                  @id @default(cuid())
  dataHora          DateTime                @default(now())
  usuario           Usuario                 @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId         String
  formulario        Formulario              @relation(fields: [formularioId], references: [id], onDelete: Cascade)
  formularioId      String
  campos            FormularioUsuarioCampo[]
  arquivos          ArquivoUsuario[]        // Relação com os arquivos enviados pelo usuário
  status            StatusInscricao         @default(ATIVO)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
}

enum StatusInscricao {
  ATIVO
  CANCELADO
}


model FormularioUsuarioCampo {
  id                String              @id @default(cuid())
  valor             String              
  campo             CampoFormulario     @relation(fields: [campoFormularioId], references: [id], onDelete: Cascade)
  campoFormularioId String
  inscricao         FormularioUsuario   @relation(fields: [formularioUsuarioId], references: [id], onDelete: Cascade)
  formularioUsuarioId String
  arquivo           ArquivoUsuario?     // Relação opcional com um arquivo (para campos do tipo arquivo)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Nova tabela para armazenar arquivos enviados pelos usuários
model ArquivoUsuario {
  id                String                  @id @default(cuid())
  nomeOriginal      String                  // Nome original do arquivo
  nomeArmazenado    String                  // Nome do arquivo no sistema de arquivos
  tamanho           Int                     // Tamanho do arquivo em bytes
  tipo              String                  // Tipo MIME do arquivo
  caminho           String                  // Caminho relativo para o arquivo
  campo             FormularioUsuarioCampo? @relation(fields: [campoId], references: [id], onDelete: Cascade)
  campoId           String?                 @unique // Um campo pode ter apenas um arquivo
  inscricao         FormularioUsuario       @relation(fields: [inscricaoId], references: [id], onDelete: Cascade)
  inscricaoId       String                  // Relação com a inscrição
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
}
